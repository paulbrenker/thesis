
@book{starke_effektive_2024,
	location = {München},
	edition = {10., überarbeitete Auflage},
	title = {Effektive Softwarearchitekturen: ein praktischer Leitfaden},
	isbn = {9783446476721},
	shorttitle = {Effektive Softwarearchitekturen},
	pagetotal = {356},
	publisher = {Hanser},
	author = {Starke, Gernot},
	date = {2024},
}

@online{openapi_initiative_openapi_2024,
	title = {{OpenAPI} Style Guide},
	url = {https://github.com/OAI/OpenAPI-Style-Guide},
	type = {Software Dokumentation},
	author = {{OpenAPI} Initiative},
	urldate = {2024-10-14},
	date = {2024},
}

@inproceedings{hasanin_effects_2018,
	location = {Salt Lake City, {UT}},
	title = {The Effects of Random Undersampling with Simulated Class Imbalance for Big Data},
	isbn = {9781538626597},
	url = {https://ieeexplore.ieee.org/document/8424689/},
	doi = {10.1109/IRI.2018.00018},
	eventtitle = {2018 {IEEE} International Conference on Information Reuse and Integration for Data Science ({IRI})},
	pages = {70--79},
	booktitle = {2018 {IEEE} International Conference on Information Reuse and Integration ({IRI})},
	publisher = {{IEEE}},
	author = {Hasanin, Tawfiq and Khoshgoftaar, Taghi},
	urldate = {2024-10-11},
	date = {2018-07},
}

@inbook{friesen_extracting_2019,
	location = {Berkeley, {CA}},
	title = {Extracting {JSON} Values with {JsonPath}},
	isbn = {9781484243299 9781484243305},
	url = {http://link.springer.com/10.1007/978-1-4842-4330-5_10},
	pages = {299--322},
	booktitle = {Java {XML} and {JSON}},
	publisher = {Apress},
	author = {Friesen, Jeff},
	bookauthor = {Friesen, Jeff},
	urldate = {2024-10-10},
	date = {2019},
	langid = {english},
	doi = {10.1007/978-1-4842-4330-5_10},
}

@online{starke_arc42_2024,
	title = {Arc42},
	url = {https://www.arc42.de/},
	type = {Architechture Template},
	author = {Starke, Gernot and Hruschka, Peter},
	urldate = {2024-10-09},
	date = {2024},
}

@misc{noauthor_openapi_2024,
	title = {{OpenAPI} Specification},
	url = {https://github.com/OAI/OpenAPI-Specification},
	version = {3},
	publisher = {Linux Foundation},
	urldate = {2024-10-09},
	date = {2024},
}

@online{stoplight_spectral_2024,
	title = {Spectral {OAS} Ruleset},
	url = {https://docs.stoplight.io/docs/spectral/4dec24461f3af-open-api-rules},
	type = {Software Dokumentation},
	author = {Stoplight},
	urldate = {2024-10-09},
	date = {2024},
}

@online{stoplight_spectral_2024-1,
	title = {Spectral {OpenAPI} Linter},
	url = {https://docs.stoplight.io/docs/spectral/674b27b261c3c-overview},
	type = {Software Dokumentation},
	author = {Stoplight},
	urldate = {2024-10-09},
	date = {2024},
	langid = {english},
}

@online{apisguru_apisguru_2024,
	title = {Apis.guru},
	url = {https://apis.guru/},
	type = {Software Dokumentation},
	author = {{APIs}.guru},
	urldate = {2024-10-09},
	date = {2024},
}

@online{apisguru_openapi_2024,
	title = {{OpenAPI} Directory},
	url = {https://github.com/APIs-guru/openapi-directory},
	titleaddon = {Daten Repository},
	author = {{APIs}.guru},
	urldate = {2024-10-09},
	date = {2024},
}

@online{stoplight_spectral_2024-2,
	title = {Spectral Real World Rulesets},
	url = {https://docs.stoplight.io/docs/spectral/674b27b261c3c-overview#-real-world-rulesets},
	author = {Stoplight},
	urldate = {2024-10-09},
	date = {2024},
}

@misc{noauthor_isoiec_2023,
	title = {{ISO}/{IEC} 25010:2023},
	url = {https://www.iso.org/standard/78176.html},
	urldate = {2024-10-09},
	date = {2023},
}

@book{klein_algorithmische_2022,
	location = {Wiesbaden},
	title = {Algorithmische Geometrie: Grundlagen, Methoden, Anwendungen},
	rights = {https://www.springer.com/tdm},
	isbn = {9783658377106 9783658377113},
	url = {https://link.springer.com/10.1007/978-3-658-37711-3},
	shorttitle = {Algorithmische Geometrie},
	publisher = {Springer Fachmedien Wiesbaden},
	author = {Klein, Rolf and Driemel, Anne and Haverkort, Herman},
	urldate = {2024-10-07},
	date = {2022},
	langid = {german},
	doi = {10.1007/978-3-658-37711-3},
}

@book{mittag_statistik_2023,
	location = {Berlin [Heidelberg]},
	edition = {7., vollständig überarbeitete und aktualisierte Auflage},
	title = {Statistik: eine interdisziplinäre Einführung mit interaktiven Elementen},
	isbn = {9783662682234},
	series = {Lehrbuch},
	shorttitle = {Statistik},
	pagetotal = {412},
	publisher = {Springer Spektrum},
	author = {Mittag, Hans-Joachim and Schüller, Katharina},
	date = {2023},
}

@inproceedings{serbout_apistic_2024,
	title = {{APIstic}: A Large Collection of {OpenAPI} Metrics},
	url = {https://ieeexplore.ieee.org/abstract/document/10555845},
	shorttitle = {{APIstic}},
	abstract = {In the rapidly evolving landscape of web services, the significance of eﬃciently designed and well-documented {APIs} is paramount. In this paper, we present {APIstic} an {API} analytics dataset and exploration tool to navigate and segment {APIs} based on an extensive set of pre-computed metrics extracted from {OpenAPI} specifications, sourced from {GitHub}, {SwaggerHub}, {BigQuery} and {APIs}.guru. These pre-computed metrics are categorized into structure, data model, natural language description, and security metrics. The extensive dataset of varied {API} metrics provides crucial insights into {API} design and documentation for both researchers and practitioners. Researchers can use {APIstic} as an empirical resource to extract refined samples, analyze {API} design trends, best practices, smells, and patterns. For {API} designers, it serves as a benchmarking tool to assess, compare, and improve {API} structures, data models, and documentation using metrics to select points of references among 1,275,568 valid {OpenAPI} specifications. The paper discusses potential use cases of the collected data and presents a descriptive analysis of selected {API} analytics metrics.The dataset available at: http://openapi.inf.usi.ch/},
	eventtitle = {2024 {IEEE}/{ACM} 21st International Conference on Mining Software Repositories ({MSR})},
	pages = {265--277},
	booktitle = {2024 {IEEE}/{ACM} 21st International Conference on Mining Software Repositories ({MSR})},
	author = {Serbout, Souhaila and Pautasso, Cesare},
	urldate = {2024-07-08},
	date = {2024},
	note = {{ISSN}: 2574-3864},
	keywords = {{API} Metrics, Analytical models, Dataset, Documentation, Market research, Measurement, {OpenAPI}, Particle measurements, Software, Web {APIs}, Web services},
}

@inproceedings{christakis_what_2016,
	location = {Singapore Singapore},
	title = {What developers want and need from program analysis: an empirical study},
	isbn = {9781450338455},
	url = {https://dl.acm.org/doi/10.1145/2970276.2970347},
	doi = {10.1145/2970276.2970347},
	shorttitle = {What developers want and need from program analysis},
	eventtitle = {{ASE}'16: {ACM}/{IEEE} International Conference on Automated Software Engineering},
	pages = {332--343},
	booktitle = {Proceedings of the 31st {IEEE}/{ACM} International Conference on Automated Software Engineering},
	publisher = {{ACM}},
	author = {Christakis, Maria and Bird, Christian},
	urldate = {2024-10-05},
	date = {2016},
	langid = {english},
}

@inproceedings{beller_analyzing_2016,
	location = {Suita},
	title = {Analyzing the State of Static Analysis: A Large-Scale Evaluation in Open Source Software},
	isbn = {9781509018550},
	url = {http://ieeexplore.ieee.org/document/7476667/},
	doi = {10.1109/SANER.2016.105},
	shorttitle = {Analyzing the State of Static Analysis},
	eventtitle = {2016 {IEEE} 23rd International Conference on Software Analysis, Evolution and Reengineering ({SANER})},
	pages = {470--481},
	booktitle = {2016 {IEEE} 23rd International Conference on Software Analysis, Evolution, and Reengineering ({SANER})},
	publisher = {{IEEE}},
	author = {Beller, Moritz and Bholanath, Radjino and {McIntosh}, Shane and Zaidman, Andy},
	urldate = {2024-10-05},
	date = {2016-03},
}

@misc{neumann_api_2017,
	title = {{API} analysis detailed results},
	url = {http://eden.dei.uc.pt/~cnl/papers/2017-tsc.zip},
	author = {Neumann, A and Laranjeiro, N and Bernadino, J},
	date = {2017},
}

@report{dijkstra_notes_1970,
	location = {Eindhoven},
	title = {Notes on Structured Programming},
	number = {70-{WSK}-03},
	institution = {Technische Hogeschool Eindhoven},
	author = {Dijkstra, Edgar},
	date = {1970},
}

@book{tukey_exploratory_1977,
	location = {Reading, Mass},
	title = {Exploratory data analysis},
	isbn = {9780201076165},
	series = {Addison-Wesley series in behavioral science},
	pagetotal = {688},
	publisher = {Addison-Wesley Pub. Co},
	author = {Tukey, John Wilder},
	date = {1977},
	keywords = {Statistics},
}

@inproceedings{ferreira_campos_mining_2019,
	location = {Montreal, {QC}, Canada},
	title = {Mining Rule Violations in {JavaScript} Code Snippets},
	rights = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/{IEEE}.html},
	isbn = {9781728134123},
	url = {https://ieeexplore.ieee.org/document/8816735/},
	doi = {10.1109/MSR.2019.00039},
	eventtitle = {2019 {IEEE}/{ACM} 16th International Conference on Mining Software Repositories ({MSR})},
	pages = {195--199},
	booktitle = {2019 {IEEE}/{ACM} 16th International Conference on Mining Software Repositories ({MSR})},
	publisher = {{IEEE}},
	author = {Ferreira Campos, Uriel and Smethurst, Guilherme and Moraes, Joao Pedro and Bonifacio, Rodrigo and Pinto, Gustavo},
	urldate = {2024-09-23},
	date = {2019-05},
}

@book{bishop_pattern_2006,
	location = {New York},
	title = {Pattern recognition and machine learning},
	isbn = {9780387310732},
	series = {Information science and statistics},
	pagetotal = {738},
	publisher = {Springer},
	author = {Bishop, Christopher M.},
	date = {2006},
	keywords = {Machine learning, Pattern perception},
}

@book{mehrotra_anomaly_2017,
	location = {Cham},
	edition = {1st ed. 2017},
	title = {Anomaly Detection Principles and Algorithms},
	isbn = {9783319675268},
	series = {Terrorism, Security, and Computation},
	abstract = {This book provides a readable and elegant presentation of the principles of anomaly detection,providing an easy introduction for newcomers to the field. A large number of algorithms are succinctly described, along with a presentation of their strengths and weaknesses. The authors also cover algorithms that address different kinds of problems of interest with single and multiple time series data and multi-dimensional data. New ensemble anomaly detection algorithms are described, utilizing the benefits provided by diverse algorithms, each of which work well on some kinds of data. With advancements in technology and the extensive use of the internet as a medium for communications and commerce, there has been a tremendous increase in the threats faced by individuals and organizations from attackers and criminal entities. Variations in the observable behaviors of individuals (from others and from their own past behaviors) have been found to be useful in predicting potential problems of various kinds. Hence computer scientists and statisticians have been conducting research on automatically identifying anomalies in large datasets. This book will primarily target practitioners and researchers who are newcomers to the area of modern anomaly detection techniques. Advanced-level students in computer science will also find this book helpful with their studies},
	pagetotal = {1},
	publisher = {Springer International Publishing : Imprint: Springer},
	author = {Mehrotra, Kishan G. and Huang, {HuaMing} and Mohan, Chilukuri K.},
	date = {2017},
	keywords = {Data Mining and Knowledge Discovery, Data mining, Data protection, Pattern Recognition, Pattern recognition, Security},
}

@book{manning_introduction_2008,
	location = {New York},
	title = {Introduction to information retrieval},
	isbn = {9780521865715},
	pagetotal = {482},
	publisher = {Cambridge University Press},
	author = {Manning, Christopher D. and Raghavan, Prabhakar and Schütze, Hinrich},
	date = {2008},
	note = {{OCLC}: ocn190786122},
	keywords = {Document clustering, Information retrieval, Semantic Web, Text processing (Computer science)},
}

@book{rupp_requirements-engineering_2014,
	location = {München},
	edition = {6., aktualisierte und erweiterte Auflage},
	title = {Requirements-Engineering und -Management: aus der Praxis von klassisch bis agil},
	isbn = {9783446438934},
	shorttitle = {Requirements-Engineering und -Management},
	pagetotal = {556},
	publisher = {Hanser},
	author = {Rupp, Chris},
	editora = {{SOPHIST-Gesellschaft für Innovatives Software-Engineering}},
	editoratype = {collaborator},
	date = {2014},
}

@inproceedings{palma_specification_2014,
	location = {Victoria, {BC}, Canada},
	title = {Specification and Detection of {SOA} Antipatterns},
	isbn = {9781479961467},
	url = {http://ieeexplore.ieee.org/document/6976169/},
	doi = {10.1109/ICSME.2014.125},
	eventtitle = {2014 {IEEE} International Conference on Software Maintenance and Evolution ({ICSME})},
	pages = {670--670},
	booktitle = {2014 {IEEE} International Conference on Software Maintenance and Evolution},
	publisher = {{IEEE}},
	author = {Palma, Francis},
	urldate = {2024-09-01},
	date = {2014-09},
}

@book{steen_distributed_2023,
	location = {Erscheinungsort nicht ermittelbar},
	edition = {Fourth edition, version 4.01 (January 2023)},
	title = {Distributed Systems},
	isbn = {9789081540643 9789081540636},
	pagetotal = {669},
	publisher = {Maarten van Steen},
	author = {Steen, Maarten van and Tanenbaum, Andrew S.},
	date = {2023},
}

@book{sommerville_software_2018,
	location = {Hallbergmoos/Germany},
	edition = {10., aktualisierte Auflage},
	title = {Software Engineering},
	isbn = {9783868943443},
	series = {Informatik},
	abstract = {Das als Klassiker geltende Lehrbuch für den Einsatz an Hochschulen liegt jetzt in 10. Auflage vor, in der agile Methoden des Software-Engineering weiter an Gewicht gewonnen haben. Ferner wurden einige Kapitel stark renoviert (Zuverlässigkeit, Betriebssicherheit, Informationssicherheit), andere wurden teilweise auf die Website ausgelagert, die ebenfalls erweitert wurde. Die vorhergehende Auflage erschien bereits 2012 und sollte zumindest durch diese aktuelle Ausgabe ergänzt werden. (2)},
	pagetotal = {896},
	publisher = {Pearson},
	author = {Sommerville, Ian},
	date = {2018},
}

@inproceedings{kim_leveraging_2024,
	location = {Lisbon Portugal},
	title = {Leveraging Large Language Models to Improve {REST} {API} Testing},
	isbn = {9798400705007},
	url = {https://dl.acm.org/doi/10.1145/3639476.3639769},
	doi = {10.1145/3639476.3639769},
	eventtitle = {{ICSE}-{NIER}'24: 2024 {ACM}/{IEEE} 44th International Conference on Software Engineering: New Ideas and Emerging Results},
	pages = {37--41},
	booktitle = {Proceedings of the 2024 {ACM}/{IEEE} 44th International Conference on Software Engineering: New Ideas and Emerging Results},
	publisher = {{ACM}},
	author = {Kim, Myeongsoo and Stennett, Tyler and Shah, Dhruv and Sinha, Saurabh and Orso, Alessandro},
	date = {2024},
	langid = {english},
}

@collection{reisig_informatik_2006,
	title = {Informatik},
	rights = {http://www.springer.com/tdm},
	isbn = {9783540327424},
	url = {http://link.springer.com/10.1007/3-540-32743-6},
	publisher = {Springer Berlin Heidelberg},
	editor = {Reisig, Wolfgang and Freytag, Johann-Christoph},
	urldate = {2024-08-31},
	date = {2006},
	langid = {german},
	doi = {10.1007/3-540-32743-6},
}

@article{bogner_restruler_2024,
	title = {{RESTRuler}: Towards Automatically Identifying Violations of {RESTful} Design Rules in Web {APIs}},
	rights = {{arXiv}.org perpetual, non-exclusive license},
	url = {https://arxiv.org/abs/2402.13710},
	doi = {10.48550/ARXIV.2402.13710},
	shorttitle = {{RESTRuler}},
	abstract = {{RESTful} {APIs} based on {HTTP} are one of the most important ways to make data and functionality available to applications and software services. However, the quality of the {API} design strongly impacts {API} understandability and usability, and many rules have been specified for this. While we have evidence for the effectiveness of many design rules, it is still difficult for practitioners to identify rule violations in their design. We therefore present {RESTRuler}, a Java-based open-source tool that uses static analysis to detect design rule violations in {OpenAPI} descriptions. The current prototype supports 14 rules that go beyond simple syntactic checks and partly rely on natural language processing. The modular architecture also makes it easy to implement new rules. To evaluate {RESTRuler}, we conducted a benchmark with over 2,300 public {OpenAPI} descriptions and asked 7 {API} experts to construct 111 complicated rule violations. For robustness, {RESTRuler} successfully analyzed 99\% of the used real-world {OpenAPI} definitions, with some failing due to excessive size. For performance efficiency, the tool performed well for the majority of files and could analyze 84\% in less than 23 seconds with low {CPU} and {RAM} usage. Lastly, for effectiveness, {RESTRuler} achieved a precision of 91\% (ranging from 60\% to 100\% per rule) and recall of 68\% (ranging from 46\% to 100\%). Based on these variations between rule implementations, we identified several opportunities for improvements. While {RESTRuler} is still a research prototype, the evaluation suggests that the tool is quite robust to errors, resource-efficient for most {APIs}, and shows good precision and decent recall. Practitioners can use it to improve the quality of their {API} design.},
	author = {Bogner, Justus and Kotstein, Sebastian and Abajirov, Daniel and Ernst, Timothy and Merkel, Manuel},
	date = {2024},
	keywords = {{FOS}: Computer and information sciences, Software Engineering (cs.{SE}), apis.guru},
}

@article{palma_semantic_2017,
	title = {Semantic Analysis of {RESTful} {APIs} for the Detection of Linguistic Patterns and Antipatterns},
	volume = {26},
	issn = {0218-8430, 1793-6365},
	url = {https://www.worldscientific.com/doi/abs/10.1142/S0218843017420011},
	doi = {10.1142/S0218843017420011},
	abstract = {Identifier lexicon may have a direct impact on software understandability and reusability and, thus, on the quality of the final software product. Understandability and reusability are two important characteristics of software quality. {REpresentational} State Transfer ({REST}) style is becoming a de facto standard adopted by software organizations to build their Web applications. Understandable and reusable Uniform Resource Identifers ({URIs}) are important to attract client developers of {RESTful} {APIs} because good {URIs} support the client developers to understand and reuse the {APIs}. Consequently, the use of proper lexicon in {RESTful} {APIs} has also a direct impact on the quality of Web applications that integrate these {APIs}. Linguistic antipatterns represent poor practices in the naming, documentation, and choice of identifiers in the {APIs} as opposed to linguistic patterns that represent the corresponding best practices. In this paper, we present the Semantic Analysis of {RESTful} {APIs} ({SARA}) approach that employs both syntactic and semantic analyses for the detection of linguistic patterns and antipatterns in {RESTful} {APIs}. We provide detailed definitions of 12 linguistic patterns and antipatterns and define and apply their detection algorithms on 18 widely-used {RESTful} {APIs}, including Facebook, Twitter, and Dropbox. Our detection results show that linguistic patterns and antipatterns do occur in major {RESTful} {APIs} in particular in the form of poor documentation practices. Those results also show that {SARA} can detect linguistic patterns and antipatterns with higher accuracy compared to its state-of-the-art approach — {DOLAR}.},
	number = {2},
	journaltitle = {International Journal of Cooperative Information Systems},
	shortjournal = {Int. J. Coop. Info. Syst.},
	author = {Palma, Francis and Gonzalez-Huerta, Javier and Founi, Mohamed and Moha, Naouel and Tremblay, Guy and Guéhéneuc, Yann-Gaël},
	date = {2017-06},
	langid = {english},
}

@book{rupp_uml_2012,
	title = {{UML} 2 glasklar},
	isbn = {978-3-446-43057-0},
	url = {https://doi.org/10.3139/9783446431973},
	pagetotal = {580},
	publisher = {Carl Hanser Verlag {GmbH} \& Co. {KG}},
	author = {Rupp, Chris and Queins, Stefan},
	date = {2012},
	doi = {10.3139/9783446431973},
}

@incollection{rodriguez_rest_2016,
	location = {Cham},
	title = {{REST} {APIs}: A Large-Scale Analysis of Compliance with Principles and Best Practices},
	volume = {9671},
	isbn = {9783319387901 9783319387918},
	url = {https://link.springer.com/10.1007/978-3-319-38791-8_2},
	shorttitle = {{REST} {APIs}},
	pages = {21--39},
	booktitle = {Web Engineering},
	publisher = {Springer International Publishing},
	author = {Rodríguez, Carlos and Baez, Marcos and Daniel, Florian and Casati, Fabio and Trabucco, Juan Carlos and Canali, Luigi and Percannella, Gianraffaele},
	date = {2016},
	langid = {english},
	doi = {10.1007/978-3-319-38791-8_2},
}

@incollection{renzel_todays_2012,
	location = {Berlin, Heidelberg},
	title = {Today’s Top “{RESTful}” Services and Why They Are Not {RESTful}},
	volume = {7651},
	isbn = {9783642350627 9783642350634},
	url = {http://link.springer.com/10.1007/978-3-642-35063-4_26},
	pages = {354--367},
	booktitle = {Web Information Systems Engineering - {WISE} 2012},
	publisher = {Springer Berlin Heidelberg},
	author = {Renzel, Dominik and Schlebusch, Patrick and Klamma, Ralf},
	date = {2012},
	doi = {10.1007/978-3-642-35063-4_26},
}

@inproceedings{petrillo_are_2016,
	location = {Cham},
	title = {Are {REST} {APIs} for Cloud Computing Well-Designed? An Exploratory Study},
	isbn = {978-3-319-46295-0},
	doi = {10.1007/978-3-319-46295-0_10},
	series = {Lecture Notes in Computer Science},
	shorttitle = {Are {REST} {APIs} for Cloud Computing Well-Designed?},
	pages = {157--170},
	booktitle = {Service-Oriented Computing},
	publisher = {Springer International Publishing},
	author = {Petrillo, Fabio and Merle, Philippe and Moha, Naouel and Guéhéneuc, Yann-Gaël},
	date = {2016},
	langid = {english},
	keywords = {Cloud Computing, Cloud Platform, Cloud Provider, Cloud Service, Software Define Network},
}

@incollection{pautasso_restful_2014,
	location = {New York, {NY}},
	title = {{RESTful} Web Services: Principles, Patterns, Emerging Technologies},
	isbn = {9781461475170 9781461475187},
	url = {https://link.springer.com/10.1007/978-1-4614-7518-7_2},
	shorttitle = {{RESTful} Web Services},
	pages = {31--51},
	booktitle = {Web Services Foundations},
	publisher = {Springer New York},
	author = {Pautasso, Cesare},
	date = {2014},
	langid = {english},
	doi = {10.1007/978-1-4614-7518-7_2},
}

@incollection{palma_are_2015,
	location = {Berlin, Heidelberg},
	title = {Are {RESTful} {APIs} Well-Designed? Detection of their Linguistic (Anti)Patterns},
	volume = {9435},
	isbn = {9783662486153 9783662486160},
	url = {http://link.springer.com/10.1007/978-3-662-48616-0_11},
	shorttitle = {Are {RESTful} {APIs} Well-Designed?},
	pages = {171--187},
	booktitle = {Service-Oriented Computing},
	publisher = {Springer Berlin Heidelberg},
	author = {Palma, Francis and Gonzalez-Huerta, Javier and Moha, Naouel and Guéhéneuc, Yann-Gaël and Tremblay, Guy},
	date = {2015},
	langid = {english},
	doi = {10.1007/978-3-662-48616-0_11},
}

@inproceedings{palma_detection_2014,
	location = {Berlin, Heidelberg},
	title = {Detection of {REST} Patterns and Antipatterns: A Heuristics-Based Approach},
	isbn = {978-3-662-45391-9},
	doi = {10.1007/978-3-662-45391-9_16},
	series = {Lecture Notes in Computer Science},
	shorttitle = {Detection of {REST} Patterns and Antipatterns},
	pages = {230--244},
	booktitle = {Service-Oriented Computing},
	publisher = {Springer},
	author = {Palma, Francis and Dubois, Johann and Moha, Naouel and Guéhéneuc, Yann-Gaël},
	date = {2014},
	langid = {english},
	keywords = {Antipatterns, Design, Detection, Heuristics, Patterns, {REST}},
}

@incollection{bogner_collecting_2020,
	location = {Cham},
	title = {Collecting Service-Based Maintainability Metrics from {RESTful} {API} Descriptions: Static Analysis and Threshold Derivation},
	volume = {1269},
	isbn = {9783030591540 9783030591557},
	url = {http://link.springer.com/10.1007/978-3-030-59155-7_16},
	shorttitle = {Collecting Service-Based Maintainability Metrics from {RESTful} {API} Descriptions},
	pages = {215--227},
	booktitle = {Software Architecture},
	publisher = {Springer International Publishing},
	author = {Bogner, Justus and Wagner, Stefan and Zimmermann, Alfred},
	urldate = {2024-07-04},
	date = {2020},
	langid = {english},
	doi = {10.1007/978-3-030-59155-7_16},
}

@book{richardson_restful_2007,
	location = {Farnham},
	title = {{RESTful} web services},
	isbn = {9780596529260},
	pagetotal = {419},
	publisher = {O'Reilly},
	author = {Richardson, Leonard and Ruby, Sam},
	date = {2007},
	keywords = {Web services},
}

@book{bergsmann_requirements_2023,
	title = {Requirements Engineering für die agile Softwareentwicklung, 3rd Edition},
	isbn = {978-1-09-815713-5},
	publisher = {dpunkt},
	author = {Bergsmann, Johannes},
	date = {2023},
}

@inproceedings{vaziri_generating_2017,
	location = {New York, {NY}, {USA}},
	title = {Generating chat bots from web {API} specifications},
	isbn = {978-1-4503-5530-8},
	url = {https://dl.acm.org/doi/10.1145/3133850.3133864},
	doi = {10.1145/3133850.3133864},
	series = {Onward! 2017},
	abstract = {Companies want to offer chat bots to their customers and employees which can answer questions, enable self-service, and showcase their products and services. Implementing and maintaining chat bots by hand costs time and money. Companies typically have web {APIs} for their services, which are often documented with an {API} specification. This paper presents a compiler that takes a web {API} specification written in Swagger and automatically generates a chat bot that helps the user make {API} calls. The generated bot is self-documenting, using descriptions from the {API} specification to answer help requests. Unfortunately, Swagger specifications are not always good enough to generate high-quality chat bots. This paper addresses this problem via a novel in-dialogue curation approach: the power user can improve the generated chat bot by interacting with it. The result is then saved back as an {API} specification. This paper reports on the design and implementation of the chat bot compiler, the in-dialogue curation, and working case studies.},
	pages = {44--57},
	booktitle = {Proceedings of the 2017 {ACM} {SIGPLAN} International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
	publisher = {Association for Computing Machinery},
	author = {Vaziri, Mandana and Mandel, Louis and Shinnar, Avraham and Siméon, Jérôme and Hirzel, Martin},
	date = {2017},
	keywords = {Conversational agents, {REST}, cloud, compilers},
}

@thesis{eriksson_using_2023,
	title = {Using {BERT} to measure objective quality of {REST}-{API} speciﬁcations},
	url = {https://www.diva-portal.org/smash/get/diva2:1768777/FULLTEXT01.pdf},
	institution = {Faculty of Software Engineering, Blekinge Institute of Technology, 371 79 Karlskrona, Sweden},
	type = {phdthesis},
	author = {Eriksson, Fritz and Åkesson, Max},
	date = {2023},
	langid = {english},
}

@article{palma_assessing_2022,
	title = {Assessing the linguistic quality of {REST} {APIs} for {IoT} applications},
	volume = {191},
	issn = {0164-1212},
	url = {https://pdf.sciencedirectassets.com/271629/1-s2.0-S0164121222X0006X/1-s2.0-S0164121222000954/main.pdf?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEMj%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJHMEUCIAgpIj%2FFNnxZbJHPohz9lL6aAjrq3YuNqOv2642%2BHeY4AiEAvBSOwE%2BQ0GoGmjrkiHmTFD5185VwxP6EpGre1niPQA8qvAUIwf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAFGgwwNTkwMDM1NDY4NjUiDCUwXYibS8NGNf3HaiqQBY6pZaTn8Xwn1a01BtR9CBmG%2B4OzB%2BCPxrI01QRHH9w5CUDlQx65TJ5OA16BIeHBZd2SJ66NbuVaBezppNNdMN6rOexXjafZUSGg5yAAAlHNRUUmAM1iGbOUmKCONQFHYrLj9Sya%2BCBrHXE3yCYAYJu%2FlYlPW7bHtiDi29VCXf4J%2Bn9wPls3C3MnBHuPa%2BbjbGDbB%2BepXqcRTm4nDrK6pXxUekyDDlNzAs9uOYrLKnBvQkbq7Sq9XThcpmmmQh%2FqgG9G4Aecw%2Fn9ejfIcSxCSWE%2BFAQ%2BBJbMMT1Ve8iGOrqibJnyc4LzvZDd08KnKoK2jIrFfPl8hMJmavD2DKrbZW%2FcEnRnNef5IP%2BCL13eF1t1pxldhqHF8WIS6pfYsw2nXnqNrzu9qWNinK72Hj5x6y2NCSfWAnA6txyjkig62UGcNJkrK0FVZMMA91l01nj4BMHrilgsCPH4kNxlOZ%2BJp50XFEXSuAGkl8uAJZE6qBf9QI2UNLgVVXgJ%2F9XTYrDlrddZLfg%2Fb0njT%2F%2BF5EKEiwd50NPEXqlq4YpBH6VaJIMFIV9ofvRVcHANiyZReNYLsBGVgUjbuzrES2s3qxOZTxD4DlCzLpJAr6drH0wz1RtTuytmQnh8cOVm1sVxMQzVMfILTLwKp61uXPBQVptzs%2FDgiHFaJDdYKwPQTkL7rO74ZuqhmhPiHEhgzYMeOg4FHmDY0WWEkrJ3Oup2AZx3gBPyKY6Q11%2FdZfNMSX%2FQxWqWFaYN5t0bEaBCXwLzApCn274ZxXmhrA47k4tAhjPeicExALVKCYtsO8NqIj%2FW3Yu5%2FQV57hVO8XjyG6P11iRIEpfXWyCUC4RW%2FFOPUoPgXVnay2BLgnOobMH%2Bs99XSjTTMPbCp68GOrEBY4U1KVXQ6GE9I2moNZ770XiBmhsgKhpvQe83bMlLMnEtAPlGnxhxahrRNcaiHgnz4F1kd2iYVI%2F3VHS%2FNxnyVKpC0sVpM4kyF%2BssY7OFTCiZdVR5bIMhkB8NXRb8IqpNG%2F32YR718MHO5xqEN0Q8gg%2F77AfCJbUrDC3S8IiNqIBpFL6%2FBhPCs%2FadEmB3hPFyymGae74SoBhRK93vLFeo1ODMA6%2FP%2ByMZbZdkbO7fAI3%2F&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20240307T170956Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAQ3PHCVTYYKSYE2HI%2F20240307%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=bf250a5b92053c1e5c9791c098382646bc80a293995f48f0229c1980d9e0c072&hash=bde3fa93df9a5c16441a90138b101ed6522b7efbf4eb565fce39048bb578e25b&host=68042c943591013ac2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&pii=S0164121222000954&tid=spdf-59a8760d-8cd4-4aa9-abd9-2dc308edb879&sid=ef76f9873807084e449ac79715ee33f2d3c0gxrqb&type=client&tsoh=d3d3LnNjaWVuY2VkaXJlY3QuY29t&ua=00025a595e015d5c55&rr=860c32313b554d58&cc=de},
	doi = {10.1016/j.jss.2022.111369},
	abstract = {Internet of Things ({IoT}) is a growing technology that relies on connected ‘things’ that gather data from peer devices and send data to servers via {APIs} (Application Programming Interfaces). The design quality of those {APIs} has a direct impact on their understandability and reusability. This study focuses on the linguistic design quality of {REST} {APIs} for {IoT} applications and assesses their linguistic quality by performing the detection of linguistic patterns and antipatterns in {REST} {APIs} for {IoT} applications. Linguistic antipatterns are considered poor practices in the naming, documentation, and choice of identifiers. In contrast, linguistic patterns represent best practices to {APIs} design. The linguistic patterns and their corresponding antipatterns are hence contrasting pairs. We propose the {SARAv}2 (Semantic Analysis of {REST} {APIs} version two) approach to perform syntactic and semantic analyses of {REST} {APIs} for {IoT} applications. Based on the {SARAv}2 approach, we develop the {REST}-Ling tool and empirically validate the detection results of nine linguistic antipatterns. We analyse 19 {REST} {APIs} for {IoT} applications. Our detection results show that the linguistic antipatterns are prevalent and the {REST}-Ling tool can detect linguistic patterns and antipatterns in {REST} {APIs} for {IoT} applications with an average accuracy of over 80\%. Moreover, the tool performs the detection of linguistic antipatterns on average in the order of seconds, i.e., 8.396 s. We found that {APIs} generally follow good linguistic practices, although the prevalence of poor practices exists.},
	pages = {111369},
	journaltitle = {Journal of Systems and Software},
	shortjournal = {Journal of Systems and Software},
	author = {Palma, Francis and Olsson, Tobias and Wingkvist, Anna and Gonzalez-Huerta, Javier},
	date = {2022},
	keywords = {Antipattern, Detection, {IoT} applications, Linguistic quality, Pattern, {REST} {APIs}},
}

@article{neumann_analysis_2021,
	title = {An Analysis of Public {REST} Web Service {APIs}},
	volume = {14},
	issn = {1939-1374},
	url = {https://ieeexplore.ieee.org/abstract/document/8385157},
	doi = {10.1109/TSC.2018.2847344},
	abstract = {Businesses are increasingly deploying their services on the web, in the form of web applications, {SOAP} services, message-based services, and, more recently, {REST} services. Although the movement towards {REST} is widely recognized, there is not much concrete information regarding the technical features being used in the field, such as typical data formats, how {HTTP} verbs are being used, or typical {URI} structures, just to name a few. In this paper, we go through the Alexa.com top 4000 most popular sites to identify precisely 500 websites claiming to provide a {REST} web service {API}. We analyze these 500 {APIs} for key technical features, degree of compliance with {REST} architectural principles (e.g., resource addressability), and for adherence to best practices (e.g., {API} versioning). We observed several trends (e.g., widespread {JSON} support, software-generated documentation), but, at the same time, high diversity in services, including differences in adherence to best practices, with only 0.8 percent of services strictly complying with all {REST} principles. Our results can help practitioners evolve guidelines and standards for designing higher quality services and also understand deficiencies in currently deployed services. Researchers may also benefit from the identification of key research areas, contributing to the deployment of more reliable services.},
	pages = {957--970},
	number = {4},
	journaltitle = {{IEEE} Transactions on Services Computing},
	author = {Neumann, Andy and Laranjeiro, Nuno and Bernardino, Jorge},
	date = {2021},
	note = {Conference Name: {IEEE} Transactions on Services Computing},
	keywords = {{API}, Analytical models, Best practices, Documentation, {HTTP}, {REST}, {RESTful}, Simple object access protocol, Standards, {XML}, web, web services, web services analysis},
}

@inproceedings{casas_uses_2021,
	title = {Uses and applications of the {OpenAPI}/Swagger specification: a systematic mapping of the literature},
	url = {https://ieeexplore.ieee.org/document/9650408},
	doi = {10.1109/SCCC54552.2021.9650408},
	shorttitle = {Uses and applications of the {OpenAPI}/Swagger specification},
	abstract = {The {OpenAPI} or Swagger specification has become the reference choice for describing web {APIs} ({REST}, {RESTful}, etc.). That is why this specification has been and is currently the center of many research articles. Several activities, tasks, and problems associated with software development can be improved, simplified, solved and/or automated with this specification. The purpose of this study is to synthesize the uses and applications of the {OpenAPI}/Swagger specification. The development activities in which it has been useful, the software artifacts (results) generated from it, and which domains have been covered, among others, are identified. The literature review that we analyzed had a total of 47 articles published between 2011 and 2020. The search corresponded with these parameters: a) mention of the development activities in which the specification has been useful, b) inclusion of the software artifacts (results) that it generates and their corresponding validation, and c) reference to the domains covered. Results show that the {OpenAPI}/Swagger specification has benefited various software development activities, being the improvement of the documentation the one that predominates (43\%). Similarly, 77\% of the articles provide solutions to the requirements and/or problems of the web {API} consumers. The automation of tasks, based on diverse tools, constitutes the most predominant result in 68\% of the manuscripts. Besides, 40\% of the works consulted cover a specific domain ({IoT}, Cloud, etc.).},
	eventtitle = {2021 40th International Conference of the Chilean Computer Science Society ({SCCC})},
	pages = {1--8},
	booktitle = {2021 40th International Conference of the Chilean Computer Science Society ({SCCC})},
	author = {Casas, Sandra and Cruz, Diana and Vidal, Graciela and Constanzo, Marcela},
	date = {2021},
	note = {{ISSN}: 2691-0632},
	keywords = {{API} Rest, {API} web, Automation, Bibliographies, Computer science, Documentation, {OpenAPI}, Servicios web, Software, Systematics, Task analysis},
}

@article{tomasdottir_adoption_2018,
	title = {The Adoption of {JavaScript} Linters in Practice: A Case Study on {ESLint}},
	volume = {46},
	rights = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/{IEEE}.html},
	issn = {0098-5589, 1939-3520, 2326-3881},
	url = {https://ieeexplore.ieee.org/document/8468105/},
	doi = {10.1109/TSE.2018.2871058},
	shorttitle = {The Adoption of {JavaScript} Linters in Practice},
	pages = {863--891},
	number = {8},
	journaltitle = {{IEEE} Transactions on Software Engineering},
	shortjournal = {{IIEEE} Trans. Software Eng.},
	author = {Tomasdottir, Kristin Fjola and Aniche, Mauricio and Van Deursen, Arie},
	date = {2018},
}

@inproceedings{haupt_framework_2017,
	title = {A Framework for the Structural Analysis of {REST} {APIs}},
	url = {https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7930199},
	doi = {10.1109/ICSA.2017.40},
	eventtitle = {2017 {IEEE} International Conference on Software Architecture ({ICSA})},
	pages = {55--58},
	booktitle = {2017 {IEEE} International Conference on Software Architecture ({ICSA})},
	author = {Haupt, Florian and Leymann, Frank and Scherer, Anton and Vukojevic-Haupt, Karolina},
	date = {2017},
	keywords = {Analytical models, Best practices, Cloud computing, Google, Measurement, Protocols, {REST}, Transforms, analysis, interface description language},
}

@article{bogner_restful_2023,
	title = {Do {RESTful} {API} design rules have an impact on the understandability of Web {APIs}?},
	volume = {28},
	issn = {1382-3256, 1573-7616},
	url = {https://link.springer.com/10.1007/s10664-023-10367-y},
	doi = {10.1007/s10664-023-10367-y},
	abstract = {Abstract 
             
              Context 
              Web {APIs} are one of the most used ways to expose application functionality on the Web, and their understandability is important for efficiently using the provided resources. While many {API} design rules exist, empirical evidence for the effectiveness of most rules is lacking. 
             
             
              Objective 
              We therefore wanted to study 1) the impact of {RESTful} {API} design rules on understandability, 2) if rule violations are also perceived as more difficult to understand, and 3) if demographic attributes like {REST}-related experience have an influence on this. 
             
             
              Method 
               
                We conducted a controlled Web-based experiment with 105 participants, from both industry and academia and with different levels of experience. Based on a hybrid between a 
                crossover 
                and a 
                between-subjects 
                design, we studied 12 design rules using {API} snippets in two complementary versions: one that adhered to a 
                rule 
                and one that was a 
                violation 
                of this rule. Participants answered comprehension questions and rated the perceived difficulty. 
               
             
             
              Results 
               
                For 11 of the 12 rules, we found that 
                violation 
                performed significantly worse than 
                rule 
                for the comprehension tasks. Regarding the subjective ratings, we found significant differences for 9 of the 12 rules, meaning that most violations were subjectively rated as more difficult to understand. Demographics played no role in the comprehension performance for 
                violation 
                . 
               
             
             
              Conclusions 
              Our results provide first empirical evidence for the importance of following design rules to improve the understandability of Web {APIs}, which is important for researchers, practitioners, and educators.},
	pages = {132},
	number = {6},
	journaltitle = {Empirical Software Engineering},
	shortjournal = {Empir Software Eng},
	author = {Bogner, Justus and Kotstein, Sebastian and Pfaff, Timo},
	date = {2023-11},
	langid = {english},
}

@misc{noauthor_notitle_nodate,
}

@misc{noauthor_notitle_nodate-1,
}

@misc{noauthor_notitle_nodate-2,
}

@misc{noauthor_notitle_nodate-3,
}

@misc{noauthor_notitle_nodate-4,
}

@misc{noauthor_notitle_nodate-5,
}

@misc{noauthor_notitle_nodate-6,
}

@misc{berners-lee_uniform_2005,
	title = {Uniform Resource Identifier ({URI}): Generic Syntax},
	url = {https://www.rfc-editor.org/rfc/rfc3986.txt},
	number = {3986},
	author = {Berners-Lee, Tim and Fielding, Roy and Masinter, L},
	date = {2005-01},
}

@book{richardson_restful_2013,
	location = {Beijing[u.a},
	edition = {1. ed.},
	title = {{RESTful} Web {APIs} [services for a changing world]},
	isbn = {978-1-4493-5806-8},
	url = {https://learning.oreilly.com/library/view/restful-web-apis/9781449359713/},
	pagetotal = {xxviii+373},
	publisher = {O'Reilly},
	author = {Richardson, Leonard},
	editora = {Amundsen, Mike},
	editoratype = {collaborator},
	date = {2013},
}

@thesis{fielding_architectural_2000,
	title = {Architectural Styles and the Design of Network-based Software Architectures},
	type = {phdthesis},
	author = {Fielding, Roy Thomas},
	date = {2000},
	langid = {english},
}

@book{masse_rest_2011,
	location = {Place of publication not identified},
	edition = {1st edition},
	title = {{REST} {API} Design Rulebook},
	isbn = {978-1-4493-1790-4},
	pagetotal = {xiii+94},
	publisher = {O'Reilly Media Incorporated},
	author = {Massé, Mark},
	date = {2011},
	keywords = {Computer Science, Engineering \& Applied Sciences},
}

@book{webber_rest_2010,
	location = {Beijing Köln},
	edition = {1. ed},
	title = {{REST} in practice: hypermedia and systems architecture},
	isbn = {978-0-596-80582-1},
	series = {Theory in practice},
	shorttitle = {{REST} in practice},
	pagetotal = {428},
	publisher = {O'Reilly},
	author = {Webber, Jim and Parastatidis, Savas and Robinson, Ian},
	date = {2010},
}

@inproceedings{kotstein_which_2021,
	location = {Cham},
	title = {Which {RESTful} {API} Design Rules Are Important and How Do They Improve Software Quality? A Delphi Study with Industry Experts},
	isbn = {978-3-030-87568-8},
	doi = {10.1007/978-3-030-87568-8_10},
	series = {Communications in Computer and Information Science},
	shorttitle = {Which {RESTful} {API} Design Rules Are Important and How Do They Improve Software Quality?},
	abstract = {Several studies analyzed existing Web {APIs} against the constraints of {REST} to estimate the degree of {REST} compliance among state-of-the-art {APIs}. These studies revealed that only a small number of Web {APIs} are truly {RESTful}. Moreover, identified mismatches between theoretical {REST} concepts and practical implementations lead us to believe that practitioners perceive many rules and best practices aligned with these {REST} concepts differently in terms of their importance and impact on software quality. We therefore conducted a Delphi study in which we confronted eight Web {API} experts from industry with a catalog of 82 {REST} {API} design rules. For each rule, we let them rate its importance and software quality impact. As consensus, our experts rated 28 rules with high, 17 with medium, and 37 with low importance. Moreover, they perceived usability, maintainability, and compatibility as the most impacted quality attributes. The detailed analysis revealed that the experts saw rules for reaching Richardson maturity level 2 as critical, while reaching level 3 was less important. As the acquired consensus data may serve as valuable input for designing a tool-supported approach for the automatic quality evaluation of {RESTful} {APIs}, we briefly discuss requirements for such an approach and comment on the applicability of the most important rules.},
	pages = {154--173},
	booktitle = {Service-Oriented Computing},
	publisher = {Springer International Publishing},
	author = {Kotstein, Sebastian and Bogner, Justus},
	editor = {Barzen, Johanna},
	date = {2021},
	langid = {english},
	keywords = {Delphi study, Design rules, {REST} {APIs}, Software quality},
}
